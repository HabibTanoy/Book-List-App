{"version":3,"sources":["Components/BookAdd.js","App.js","serviceWorker.js","index.js"],"names":["BookAdd","state","bookName","author","year","result","changeHandler","e","setState","target","name","value","submitHandler","preventDefault","axios","post","then","response","concat","data","catch","error","console","log","this","newData","map","className","onSubmit","type","onChange","scope","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wTAmFeA,E,4MA9EXC,MAAQ,CACNC,SAAS,GACTC,OAAO,GACPC,KAAK,GACLC,OAAO,I,EAGRC,cAAgB,SAACC,GACb,EAAKC,SAAL,eACKD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAIlCC,cAAgB,SAACL,GACbA,EAAEM,iBACHC,IAAMC,KAAK,6CAA8C,EAAKd,OAC7De,MAAK,SAAAC,GACF,EAAKT,SAAS,CACVH,OAAQ,EAAKJ,MAAMI,OAAOa,OAAOD,EAASE,WAGjDC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,MAEhB,EAAKb,SAAS,CACZN,SAAS,GACTC,OAAO,GACPC,KAAK,M,uDAID,IAAD,EAC8BoB,KAAKvB,MAAhCC,EADH,EACGA,SAAUC,EADb,EACaA,OAAQC,EADrB,EACqBA,KACpBqB,EAAUD,KAAKvB,MAAMI,OAAOqB,KAAI,SAAAP,GACpC,OACI,+BACE,4BACN,4BAAKA,EAAKjB,UACV,4BAAKiB,EAAKhB,QACV,4BAAKgB,EAAKf,WAKZ,OACI,yBAAKuB,UAAU,eACb,6CACE,0BAAMC,SAAUJ,KAAKZ,eACnB,yBAAKe,UAAU,cACb,4CACA,2BAAOE,KAAK,OAAOF,UAAU,eAAejB,KAAK,WAAWoB,SAAUN,KAAKlB,cAAeK,MAAOT,KAEnG,yBAAKyB,UAAU,cACb,yCACA,2BAAOE,KAAK,OAAOF,UAAU,eAAejB,KAAK,SAASoB,SAAUN,KAAKlB,cAAeK,MAAOR,KAEjG,yBAAKwB,UAAU,cACb,uCACA,2BAAOE,KAAK,OAAOF,UAAU,eAAejB,KAAK,OAAOoB,SAAUN,KAAKlB,cAAeK,MAAOP,KAE/F,4BAAQyB,KAAK,SAASF,UAAU,mBAAhC,WAEF,6BACA,2BAAOA,UAAU,SACb,+BACE,4BACE,wBAAII,MAAM,OAAV,YACA,wBAAIA,MAAM,OAAV,UACA,wBAAIA,MAAM,OAAV,UAGPN,Q,GAzEKO,aCSPC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd5B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM4B,c","file":"static/js/main.f933de0b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass BookAdd extends Component {\n\n    state = {\n      bookName:'',\n      author:'',\n      year:'',\n      result:[]\n    }\n    \n     changeHandler = (e) => {\n         this.setState({\n             [e.target.name]: e.target.value\n         })\n     }\n\n     submitHandler = (e) => {\n         e.preventDefault()\n        axios.post('https://jsonplaceholder.typicode.com/posts', this.state)\n        .then(response => {\n            this.setState({\n                result: this.state.result.concat(response.data)\n            })\n        })\n        .catch(error => {\n            console.log(error)\n        })\n        this.setState({\n          bookName:'',\n          author:'',\n          year:''\n        })\n     }\n    \n    render() { \n        const { bookName, author, year } = this.state;\n        const newData = this.state.result.map(data => {\n          return(\n              <tbody>\n                <tr>\n          <td>{data.bookName}</td>\n          <td>{data.author}</td>\n          <td>{data.year}</td>\n                </tr>\n              </tbody>              \n          )\n        })\n        return ( \n            <div className=\"text-center\">\n              <h2>Book List App</h2>\n                <form onSubmit={this.submitHandler}>\n                  <div className=\"form-group\">\n                    <label>Book Name</label>\n                    <input type=\"text\" className=\"form-control\" name=\"bookName\" onChange={this.changeHandler} value={bookName} />\n                  </div>\n                  <div className=\"form-group\">\n                    <label>Author</label>\n                    <input type=\"text\" className=\"form-control\" name=\"author\" onChange={this.changeHandler} value={author} />\n                  </div>\n                  <div className=\"form-group\">\n                    <label>year</label>\n                    <input type=\"text\" className=\"form-control\" name=\"year\" onChange={this.changeHandler} value={year} />\n                  </div>\n                  <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                </form>\n                <br/>\n                <table className=\"table\">\n                    <thead>\n                      <tr>\n                        <th scope=\"col\">BookName</th>\n                        <th scope=\"col\">Author</th>\n                        <th scope=\"col\">Year</th>\n                      </tr>\n                    </thead>\n                {newData}\n              </table>\n            </div>\n         );\n    }\n}\n \nexport default BookAdd;","import React from 'react';\nimport './App.css';\nimport BookAdd from './Components/BookAdd';\n\nfunction App() {\n  return (\n    <div>\n      <BookAdd />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}